#!/usr/bin/env python3

# Importing all required modules
import tweepy
import logging
import os,sys,time
from tweepy import API
from assets.banners import *
from assets.colors import *
from config.credentials import *

# Configuring logging info
logging.basicConfig(format=f"%(asctime)s %(message)s",datefmt=f"{white}[{red}%I{end}{white}:{red}%M{end}{white}:{red}%S%p{end}{white}]",level=logging.INFO)

 
class Tweely:
    # Initiating self
    def __init__(self):

        # Authenticating provided credentials
        self.__auth = self.authenticate()
        self.__api = API(self.__auth, wait_on_rate_limit = True, wait_on_rate_limit_notify = True, compression = True)
        
        try:
        	logging.info("%sAUTHENTICATING%s%s: User authentication in progress, please wait…%s" % (redBackground,end,white,end))
        	self.__api.verify_credentials()
        	logging.info("%sAUTHENTICATED%s%s: User authentication complete.%s" % (greenBackground,end,white,end));time.sleep(1)
        	
        except KeyboardInterrupt:
        	sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))		
        	
        except Exception as e:
        	logging.info("%sTWEELY%s %ssays; %s%s%s" % (redBackground,end,white,red,e,end))
        	logging.info("%sRetrying, please wait…%s" % (white,end));time.sleep(3)
        	self.__init__()
        	
    # Getting credentials for user aunthentication   
    def authenticate(self):
        __auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
        __auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)
        return __auth	
    # Main screen will return a list of all tweely options  
    def mainScreen(self):
        
        # Mainloop to keep tweely running	  	
        while True:
            try:
                # Clear screen when called
                os.system("clear")
                
                # calling banner
                mainBanner()
                
                # input asking user to enter a choice
                choice = input("|%sTWEELY%s|: " % (greenBackground,end))
                if choice == "1":
                    self.viewMyInfo()
                    
                elif choice == "2":
                	self.viewTimeline()
                    
                elif choice == "3":
                    self.updateBio()
                    
                elif choice == "4":
                	self.updateName()
                	
                elif choice == "5":
                	self.updateLocation()
                	
                elif choice == "6":
                	self.updateProfilePic()
                	
                elif choice == "7":
                    self.updateCoverPhoto()
                	
                elif choice == "8":
                	self.composeTweet()
                	
                elif choice == "9":
                    self.composeWithFile()
                    
                elif choice == "10":
                     self.Retweet()
                     
                elif choice == "11":
                	self.unRetweet()
                	
                elif choice == "12":
                	self.deleteTweet()

                elif choice == "13":
                    self.likeTweet()

                elif choice == "14":
                    self.unlikeTweet()

                elif choice == "15":
                    self.likeRecentTweets()

                elif choice == "16":
                    self.unlikeRecentTweets()
                	
                elif choice == "17":
                	self.followUser()
                	
                elif choice == "18":
                	self.unfollowUser()
                	
                elif choice == "19":
                	self.sendMessage()
                	
                elif choice == "20":
                	self.deleteMessage()
                	
                elif choice == "21":
                	self.viewMessage()
                	
                elif choice == "22":
                	self.blockUsers()
                	
                elif choice == "23":
                    self.unblockUsers()
                    
                elif choice == "24":
                    self.blockedUsers()
                    
                elif choice == "25":
                	self.searchUsers()
                	
                elif choice == "26":
                	self.getUserInfo()

                elif choice == "99":
                    self.about()
                	
                elif choice == "00":
                	self.quit()              	        	
                           
                else:
                    logging.info("%sTWEELY%s%s says%s%s; I didn't understand that response, please try again%s" % (greenBackground,end,green,end,white,end));time.sleep(3)
                    os.system("clear")
             
            # If any exceptions occur, return error messages  or and return to the 
            # the main screen       
            except KeyboardInterrupt:
                sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
                    
            except Exception as e:
                logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
                os.system("clear")

     
    # Composing a tweet                           
    def composeTweet(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # calling the banner
        composeBanner()
        try:
            
            # New message text input
            tweet_text = input("%sWrite Your Tweet%s: (maximum 280 characters)  " % (greenBackground,end))
            logging.info("%sUploading tweet, please wait…%s" % (white,end))
            self.__api.update_status(tweet_text)
            logging.info("%sYour tweet “%s%s%s%s”has been succesfully uploded.%s" %(white,green,tweet_text,end,white,end));time.sleep(1)
            
            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()
       
        # If any exceptions occur, return error messages  or and return to the 
        # the main screen   
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
            
        except Exception as e:
            logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            self.mainScreen()
            
    # Retweeting      
    def Retweet(self):
       
       # Clear screen when function is called
       os.system("clear")
       
       # calling banner
       retweetBanner()
       try:
            
            # Tweet id input
            tweet_id = input("%sTweet ID%s: " % (greenBackground,end))
            logging.info("%sRetweeting, please wait…%s" % (white,end))
            self.__api.retweet(tweet_id)
            logging.info("%sRetweeted%s.." % (white,end))
            
            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()
         
       # If any exceptions occur, return error messages  or and return to the 
       # the main screen   
       except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
            
       except Exception as e:
            logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            self.mainScreen()
            

    # Unretweeting          
    def unRetweet(self):
            
            # Clear screen when function is called
            os.system("clear")
            
            # calling function
            unRetweetBanner()
            try:
            	# Tweet id input
            	tweet_id = input("%sTweet ID%s: " % (greenBackground,end))
            	logging.info("%sUnretweeting, please wait…%s" % (white,end))
            	self.__api.unretweet(tweet_id)
            	logging.info("%sUnretweeted%s.." % (white,end))
            	
            	# on True in input, user returns to the main screen
            	input("\n%sPress any key to return to the main screen%s " % (white,end))
            	self.mainScreen()
            
            # If any exceptions occur, return error messages  or and return to the 
            # the main screen
            except KeyboardInterrupt:
            	sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
            	
            except Exception as e:
            	logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            	self.mainScreen()
            	        
     
    # Composing a tweet with attachment     
    def composeWithFile(self):
       
       # Clear screen when function is called
       os.system("clear")
       
       # calling banner
       composeWithFileBanner()
       try:
           # New message (with attachment) text input
           tweet_text = input("%sWrite Your Tweet%s: (maximum 280 characters)  " % (greenBackground,end))
           attachment_input = input("%sAttachment/Path%s: (PNG, JPG, GIF)  " % (greenBackground,end))
           logging.info("%sUploading tweet, please wait…%s" % (white,end))
           self.__api.update_with_media(attachment_input, status = tweet_text)
           logging.info("%sYour tweet “%s%s%s%s” with attachment %s%s%s%s has been succesfully uploaded.%s" %(white,green,tweet_text,end,white,green,attachment_input,end,white,end));time.sleep(1)
           
           # on True in input, user returns to the main screen
           input("\n%sPress any key to return to the main screen%s " % (white,end))
           self.mainScreen()
      
       # If any exceptions occur, return error messages  or and return to the 
       # the main screen     
       except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
           
       except Exception as e:
            logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            self.mainScreen()   

    
    # Following a specified user                     
    def followUser(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	followBanner()
    	try:
    		# Username input
    		username_input = input("%sUsername/ID%s: @" % (greenBackground,end))
    		logging.info("%sFollowing @%s, please wait…%s" % (white,username_input,end))
    		user = self.__api.create_friendship(username_input)
    		logging.info("%sFollowed @%s..%s" % (white,user.screen_name,end))
    		
    		# on True in input, user returns to the main screen
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen		
    	except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()

    
    # Unfollowing a specified user		    		
    def unfollowUser(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # Calling banner
        unfollowBanner()
        try:
            
            # Username input
            username_input = input("%sUsername/ID%s: @" % (greenBackground,end))
            logging.info("%sUnfollowing @%s, please wait…%s" % (white,username_input,end))
            user = self.__api.destroy_friendship(username_input)
            logging.info("%sUnfollowed @%s..%s" % (white,user.screen_name,end))
            
            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()
        
        # If any exceptions occur, return error messages  or and return to the 
        # the main screen    
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
            
        except Exception as e:
        	logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
        	self.mainScreen()
        	
     
    # Liking a tweet	
    def likeTweet(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # Calling banner
        likeTweetBanner()
        try:
            
            # Tweet id input
            tweet_id = input("%sTweet ID%s: " % (greenBackground,end))
            logging.info("%sLiking tweet, please wait…%s")
            self.__api.create_favorite(tweet_id)
            logging.info("%sTweet liked..%s" % (white,end));time.sleep(1)
            
            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()
        
        # If any exceptions occur, return error messages  or and return to the 
        # the main screen    
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
            
        except Exception as e:
        	logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
        	self.mainScreen()
        	
    
    # Unliking tweet
    def unlikeTweet(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # Calling banner
        unlikeTweetBanner()
        try:
            
            # Tweet id input
            tweet_id = input("%sTweet ID%s: " % (greenBackground,end))
            logging.info("%sUnliking tweet, please wait…%s" % (white,end))
            self.__api.destroy_favorite(tweet_id)
            logging.info("%sTweet unliked..%s" % (white,end));time.sleep(1)
            
            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()
        
        # If any exceptions occur, return error messages  or and return to the 
        # the main screen   
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
            
        except Exception as e:
        	logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
        	self.mainScreen()
    	            
     
    # Liking top recent tweets  on authenticated user's' timeline   	            	
    def likeRecentTweets(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	likeRecentBanner()
    	try:
    		
    		# Tweet count input
    		tweet_count = input("%sNumber Of Tweets To Like%s: (Maximum 20)  " % (greenBackground,end))
    		logging.info("%sFetching tweets, please wait…%s" % (white,end))
    		timeline = self.__api.home_timeline(count=int(tweet_count))
    		logging.info("%sShowing %s tweets..%s" % (white,len(timeline),end));time.sleep(1)
    		
    		# Loop through tweets on timeline
    		for tweet in timeline:
    			self.__api.create_favorite(tweet.id)
    			print("%s%s%s " % (white,tweet.author.name,end))
    			print("%sTweet ID%s:%s\n" % (white,end,tweet.id))
    			print(tweet.text)
    			print("%sStatus%s: %sLiked%s" % (white,end,greenBackground,end),end="\n")
    			print("-"*100);time.sleep(0.8)
    		
    		# on True in input, user returns to the main screen    			    				    			    			
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen		
    	except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))		
    	
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # Unliking top recent tweets on authenticated user's' timeline
    def unlikeRecentTweets(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	unlikeRecentBanner()
    	try:
    		
    		# Tweet count input
    		tweet_count = input("%sNumber Of Tweets To Unlike%s: (Maximum 20)  " % (greenBackground,end))
    		logging.info("%sFetching tweets, please wait…%s" % (white,end))
    		timeline = self.__api.home_timeline(count=int(tweet_count))
    		logging.info("%sShowing %s tweets..%s" % (white,len(timeline),end));time.sleep(1)
    		
    		# Looping through tweets on timeline
    		for tweet in timeline:
    			self.__api.destroy_favorite(tweet.id)
    			print("%s%s%s " % (white,tweet.author.name,end))
    			print("%sTweet ID%s:%s\n" % (white,end,tweet.id))
    			print(tweet.text)
    			print("%sStatus%s: %sUnliked%s" % (white,end,redBackground,end),end="\n")
    			print("-"*100);time.sleep(0.8)
    		
    		# on True in input, user returns to the main screen	    			
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))		
    	
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
		
    
    # Get public user info
    def getUserInfo(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	userInfoBanner()
    	try:
    		
    		# Username input
    		username_input = input("%sUsername/ID%s: @" % (greenBackground,end))
    		logging.info("%sFetching user info, please wait…%s" % (white,end))
    		user = self.__api.get_user(username_input)
    		print("\n%sUSER INFO👤________________%s" % (white,end));time.sleep(1)
    		print("%sScreen Name:%s %s" % (white,end,user.name))
    		print("%sUsername:%s @%s" % (white,end,user.screen_name))
    		print("%sID:%s %s" % (white,end,str(user.id)))
    		print("%sBio:%s" % (white,end),user.description)
    		print("%sFollowers%s: %s" % (white,end,user.followers_count))
    		print("%sLocation:%s %s" % (white,end,user.location))
    		print("%sJoined On:%s %s" % (white,end,str(user.created_at)));time.sleep(0.5)
    		print("\n%sTIMELINE📰_______________%s" % (white,end))
    		tweet_count = input("%sNumber Of Tweets To View%s: (maximum 20)  " % (greenBackground,end))
    		logging.info("%sFetching timeline data, please wait…%s" % (white,end))
    		timeline = self.__api.user_timeline(username_input, count = int(tweet_count))
    		logging.info("%sShowing %s recent tweet(s) on %s's timeline..%s" % (white,len(timeline),user.name,end));time.sleep(1)
    		
    		# Looping through ttweets on timeline
    		for tweet in timeline:
    			print("\n%s%s%s" % (white,tweet.author.name,end))
    			print("%sTweet ID%s:%s\n" % (white,end,tweet.id))
    			print(tweet.text)
    			print("%s\nTweet created on%s:%s" % (white,end,str(tweet.created_at)))
    			print("-"*100)
    			
    		print("%sLAST ACCOUNTS THAT FOLLOWED👥____________%s %s@%s%s" % (white,end,green,user.name,end))
    		
    		# Looping through user's following'
    		for follower in user.followers():
    			print("\n%s%s%s" % (white,follower.name,end))
    			print("%sUsername%s:%s" % (white,end,follower.screen_name))
    			print("%sID%s:%s" % (white,end,follower.id))
    			print("%sBio%s:%s" % (white,end,follower.description))
    			print("%sFollowers%s:%s" % (white,end,follower.followers_count))
    			print("%sLocation%s:%s" % (white,end,follower.location))
    			print("%sJoined On%s:%s" % (white,end,str(follower.created_at)))
    			print("-"*100)

    		
    		# on True in input, user returns to the main screen
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()

    
    # Updating authenticated user's' bio			    			
    def updateBio(self):
    			
    			# Clear screen when function is called
    			os.system("clear")
    			
    			# Calling banner
    			updateBioBanner()
    			try:
    				
    				# New bio input
    				bio_input = input("%sWrite New Bio%s: (maximum 200 characters)  " % (greenBackground,end))
    				logging.info("%sUpdating your bio, please wait…%s;" % (white,end))
    				self.__api.update_profile(description=bio_input)
    				logging.info("%sBio updated to%s “%s%s%s%s”%s." % (white,end,green,bio_input,end,white,end));time.sleep(1)
    				
    				# on True in input, user returns to the main screen
    				input("\nPress any key to return to the main screen\n")
    				self.mainScreen()
    			
    			# If any exceptions occur, return error messages  or and return to the 
    			# the main screen	
    			except KeyboardInterrupt:
    				sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    				
    			except Exception as e:
    				logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    				self.mainScreen()

    
    # Update authenticated user's' display name				    				
    def updateName(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	updateNameBanner()
    	try:
    		
    		# New name inpur
    		name_input = input("%sNew Screen Name%s: (maximum 50 characters)  " % (greenBackground,end))
    		logging.info("%sUpdating your screen name, please wait…%s;" % (white,end))
    		self.__api.update_profile(name_input)
    		logging.info("%sScreen name updated to%s “%s%s%s%s”%s." % (white,end,green,name_input,end,white,end));time.sleep(1)
    		
    		# on True in input, user returns to the main screen
    		input("\nPress any key to return to the main screen\n")
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # Update authenticated user's' location		
    def updateLocation(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	updateLocationBanner()
    	try:
    		location_input = input("%sNew Location%s: (maximum 30 characters)  " % (greenBackground,end))
    		logging.info("%sUpdating your location, please wait…%s;" % (white,end))
    		self.__api.update_profile(name_input)
    		logging.info("%sLocation updated to“%s”%s." % (white,location_input,end));time.sleep(1)
    		
    		# on True in input, user returns to the main screen	
    		input("\nPress any key to return to the main screen\n")
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    	
    # view Authenticated user's info	
    def viewMyInfo(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	myInfoBanner()
    	try:
    		logging.info("%sFetching your info, please wait…%s" % (white,end))
    		me = self.__api.me()
    		print("\n%sAUTHENTICATED USER INFO👤___________%s" % (white,end));time.sleep(1)
    		print("%sScreen Name:%s %s" % (white,end,me.name))
    		print("%sUsername:%s @%s" % (white,end,me.screen_name))
    		print("%sID:%s %s" % (white,end,str(me.id)))
    		print("%sBio:%s%s" % (white,end,me.description))
    		print("%sFollowers%s: %s" % (white,end,me.followers_count))
    		print("%sLocation:%s %s" % (white,end,me.location))
    		print("%sJoined On:%s %s" % (white,end,str(me.created_at)))
    		print("\n%sTIMELINE📰_______________%s" % (white,end))
    		tweet_count = input("%sEnter Number Of Tweets To View%s: (maximum 20)  " % (greenBackground,end))
    		logging.info("%sFetching timeline data, please wait…%s" % (white,end))
    		timeline = self.__api.home_timeline(count = int(tweet_count))
    		logging.info("%sShowing %s recent tweet(s) on your timeline..%s" % (white,len(timeline),end));time.sleep(1)
    		for tweet in timeline:
    			print("\n%s%s%s" % (white,tweet.author.name,end))
    			print("%sTweet ID%s:%s\n" % (white,end,tweet.id))
    			print(tweet.text)
    			print("%s\nTweet created on%s:%s" % (white,end,str(tweet.created_at)))
    			print("-"*100)

    		print("\n%sLAST ACCOUNTS THAT FOLLOWED YOU👥___________%s" % (white,end))
    		
    		# Looping through user's followers'
    		for follower in me.followers():
    			print("\n%s%s%s" % (white,follower.name,end))
    			print("%sUsername%s:%s" % (white,end,follower.screen_name))
    			print("%sID%s:%s" % (white,end,follower.id))
    			print("%sBio%s:%s" % (white,end,follower.description))
    			print("%sFollowers%s:%s" % (white,end,follower.followers_count))
    			print("%sLocation%s:%s" % (white,end,follower.location))
    			print("%sJoined On%s:%s" % (white,end,str(follower.created_at)))
    			print("-"*100)
    		
    		# on True in input, user returns to the main screen	
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # Search users		
    def searchUsers(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	searchUserBanner()
    	try:
    		
    		# Username input
    		username_input = input("%sUsername/ID%s: @" % (greenBackground,end))
    		logging.info("%sSearching twitter.com for @%s…%s" % (white,username_input,end))
    		users = self.__api.search_users(username_input)
    		logging.info("%sShowing %s results for @%s and related usernames:%s" % (white,len(users),username_input,end));time.sleep(1)
    		for user in users:
    			print("\n%s%s%s" % (white,user.name,end))
    			print("%sUsername%s:%s" % (white,end,user.screen_name))
    			print("%sID%s:%s" % (white,end,user.id))
    			print("%sBio%s:%s" % (white,end,user.description))
    			print("%sFollowers%s:%s" % (white,end,user.followers_count))
    			print("%sLocation%s:%s" % (white,end,user.location))
    			print("%sJoined On%s:%s" % (white,end,str(user.created_at)))
    			print("-"*100)
    		
    		# on True in input, user returns to the main screen	
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # View authenticated user timeline		
    def viewTimeline(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	viewTimelineBanner()
    	try:
    		
    		# Tweet count input
    		tweet_count = input("%sNumber Of Tweets To View%s: (maximum 20)  " % (greenBackground,end))
    		logging.info("%sFetching timeline data, please wait…%s" % (white,end))
    		timeline = self.__api.home_timeline(count = int(tweet_count))
    		logging.info("%sShowing %s recent tweet(s) on your timeline..%s" % (white,len(timeline),end));time.sleep(1)
    		for tweet in timeline:
    			print("\n%s%s%s" % (white,tweet.author.name,end))
    			print("%sTweet ID%s:%s\n" % (white,end,tweet.id))
    			print(tweet.text)
    			print("%s\nTweet created on%s:%s" % (white,end,str(tweet.created_at)))
    			print("-"*100)
    		
    		# on True in input, user returns to the main screen		
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    			
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # Sending message			
    def sendMessage(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	sendMessageBanner()
    	try:
    		user_id_input = input("%sRecipient ID%s: " % (greenBackground,end))
    		compose_message = input("\n%sWrite Message%s; (maximum 10,000 characters)  " % (greenBackground,end))
    		logging.info("%sSending message, please wait…%s" % (white,end))
    		send = self.__api.send_direct_message(user_id_input,compose_message)
    		logging.info("%sMessage sent..%s\n" % (white,end));time.sleep(1)
    		print("%sRecipient ID%s:%s" % (white,end,send.message_create["target"]["recipient_id"]))
    		print("%sMessage ID%s:%s" % (white,end,send.id))
    		print("%sTimestamp%s:%s" % (white,end,send.created_timestamp))
    		print("\n%sMessage%s; %s\n" % (white,end,send.message_create["message_data"]["text"]));time.sleep(1)
    		print("%sStatus%s: %sSent%s" % (white,end,greenBackground,end))
    		
    		# on True in input, user returns to the main screen
    		input("%s\nPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # View sent nessage(s)		
    def viewMessage(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Callimg banner
    	viewMessageBanner()
    	try:
    		
    		# Message id input
    		message_id = input("%sMessage ID%s: " % (greenBackground,end))
    		logging.info("%sFetching message data, please wait…%s" % (white,end))
    		get = self.__api.get_direct_message(message_id, full_text = True)
    		logging.info("%sMessage data fetched..%s" % (white,end));time.sleep(1)
    		print("\n%sRecipient ID%s: %s" % (white,end,get.message_create["target"]["recipient_id"]))
    		print("%sMessage ID%s:%s" % (white,end,get.id))
    		print("%sTimestamp%s:%s" % (white,end,get.created_timestamp))
    		print("\n%sMessage%s; %s" % (white,end,get.message_create["message_data"]["text"]));time.sleep(1)
    		
    		# on True in input, user returns to the main screen
    		input("\n%sPress eny key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # Delete message	 	
    def deleteMessage(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	deleteMessageBanner()
    	try:
    		
    		# Message id input
    		message_id = input("%sMessage ID%s: " % (greenBackground,end))
    		logging.info("%sDeleting message, please wait…%s" % (white,end))
    		self.__api.destroy_direct_message(message_id)
    		logging.info("%sMessage deleted..%s" % (white,end));time.sleep(1)
    		
    		# on True in input, user returns to the main screen
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		
    
    # Update profile photo		
    def updateProfilePic(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	updateProfilePicBanner()
    	try:
    		
    		# Filename(attachment) input
    		filename = input("%sFilename/Path%s: (PNG, JPG, GIF)  " % (greenBackground,end))
    		logging.info("%sUpdating your profile picture, please wait…%s" % (white,end))
    		update = self.__api.update_profile_image(filename)
    		logging.info("%sProfile picture updated..%s" % (white,end));time.sleep(1)
    		
    		# on True in input, user returns to the main screen
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    	
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen	
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    		logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    		self.mainScreen()
    		

    # Delete tweet
    def deleteTweet(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # Calling banner
        deleteTweetBanner()
        try:
            tweet_id = input("%sTweet ID%s: " % (greenBackground,end))
            logging.info("%sDeleting tweet, please wait…%s" % (white,end))
            self.__api.destroy_status(tweet_id)
            logging.info("%sTweet deleted..%s" % (white,end));time.sleep(1)

            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()

        # If any exceptions occur, return error messages  or and return to the 
        # the main screen
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
        except Exception as e:
            logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            self.mainScreen()
            

    # Update cover photo
    def updateCoverPhoto(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # Calling banner
        updateCoverPhotoBanner()
        try:
            
            # Filename(attachment) input
            filename = input("%sFilename/Path%s: (PNG, JPG, GIF)  " % (greenBackground,end))
            logging.info("%sUpdating cover photo, please wait…%s" % (white,end))
            self.__api.update_profile_background_image(filename)
            logging.info("%sCover photo updated..%s" % (white,end));time.sleep(1)
            
            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()

        # If any exceptions occur, return error messages  or and return to the 
        # the main screen
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))

        except Exception as e:
            logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            self.mainScreen()
            

    # Block specified user(s)
    def blockUsers(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # Calling banner
        blockUsersBanner()
        try:
            
            # Username input
            username_input = input("%sUsername/ID%s: @" % (greenBackground,end))
            logging.info("%sBlocking @%s, please wait…%s" % (white,username_input,end))
            self.__api.create_block(username_input)
            logging.info("%s@%s Blocked..%s" % (white,username_input,end));time.sleep(1)

            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()

        # If any exceptions occur, return error messages  or and return to the 
        # the main screen
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))

        except Exception as e:
            logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            self.mainScreen()
            

    # Unblock specified user(s)
    def unblockUsers(self):
        
        # Clear screen when function is called
        os.system("clear")
        
        # Calling banner
        unblockUsersBanner()
        try:
            
            # Clear screen when function is called
            username_input = input("%sUsername/ID%s: @" % (greenBackground,end))
            logging.info("%sUnblocking @%s, please wait…%s" % (white,username_input,end))
            self.__api.destroy_block(username_input)
            logging.info("%s@%s Unblocked..%s" % (white,username_input,end));time.sleep(1)

            # on True in input, user returns to the main screen
            input("\n%sPress any key to return to the main screen%s " % (white,end))
            self.mainScreen()

        # If any exceptions occur, return error messages  or and return to the 
        # the main screen
        except KeyboardInterrupt:
            sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))

        except Exception as e:
            logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
            self.mainScreen()
            
     # List all blocled user(s)    
    def blockedUsers(self):
    	os.system("clear")
    	blockedUsersBanner()
    	try:
    		logging.info("%sFetching block list, please wait…%s" % (white,end))
    		blocked = self.__api.blocks()
    		logging.info("%sBlock list fetched..%s" % (white,end));time.sleep(1)
    		print("\n%sBlocked Users%s: %s" % (white,end,len(blocked)))

    		count = 0
    		for user in blocked:
    		    count = count + 1
    		    print("\n%s. %s%s%s" % (count,white,user.name,end))
    		    print("   %sUsername%s:%s" % (white,end,user.screen_name))
    		    print("   %sID%s:%s" % (white,end,user.id))
    		    print("   %sBio%s:%s" % (white,end,user.description))
    		    print("   %sFollowers%s:%s" % (white,end,user.followers_count))
    		    print("   %sLocation%s:%s" % (white,end,user.location))
    		    print("   %sJoined On%s:%s" % (white,end,str(user.created_at)))
    		    print("-"*100)
    		
    		# on True in input, user returns to the main screenu	
    		input("\n%sPress any key to return to the main screen%s " % (white,end))
    		self.mainScreen()
    		
    	# If any exceptions occur, return error messages  or and return to the 
        # the main screen
    	except KeyboardInterrupt:
    		sys.exit("%sTweely terminated with%s %sCTRL+C%s" % (white,end,redBackground,end))
    		
    	except Exception as e:
    	    logging.info("%sTWEELY%s %ssays; %s%s%s" %(redBackground,end,white,red,e,end));time.sleep(5)
    	    self.mainScreen()
    	    
   
    # About info 	      						    		
    def about(self):
    	
    	# Clear screen when function is called
    	os.system("clear")
    	
    	# Calling banner
    	aboutBanner()
    	
    	# On True in input, the user(s) will return to the main screen
    	input("%sPress any key to return to the main screen%s " % (white,end))
    	self.mainScreen()

  	
    # Quit program					    				
    def quit(self):
    	
    	# Response input
    	query = input("\n%sThis will terminate Tweely, continue? %sYES/NO%s " % (brightred,redBackground,end));time.sleep(0.5)
    	if query.lower() == "yes":
    	    sys.exit("%sTWEELY%s %ssays; Alright, see you later (^_^)%s" %(greenBackground,end,white,end))
    	
    	elif query.lower() == "no":
    		self.mainScreen()
    		
    	else:
    		logging.info("%sTWEELY%s%s says%s%s; I didn't understand that response, please try again%s" % (greenBackground,end,green,end,white,end));time.sleep(3)
    		self.mainScreen()
    		    			
    			
if __name__ == "__main__":
    tweely = Tweely()
    tweely.mainScreen()
